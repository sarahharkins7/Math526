{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "b1a2ea18-a8a1-4960-80ff-8a98bdcb37d9",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from numpy import random\n",
    "from sympy import Matrix\n",
    "from scipy.spatial import distance\n",
    "from sklearn.cluster import KMeans\n",
    "from scipy.linalg import eig"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "e147e33b-c0fc-408e-b17a-cc8655ff7396",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#True number of underlying clusters\n",
    "d = 4\n",
    "\n",
    "#Assuming that each cluster is evenly spaced along the line y = x\n",
    "partitions = list(np.linspace(0, 1, d + 1))\n",
    "\n",
    "#True probability that the data is generated by each class\n",
    "categorical_weights = random.uniform(0, 1, 2)\n",
    "categorical_weights = categorical_weights/np.sum(categorical_weights)\n",
    "\n",
    "x = []\n",
    "y = []\n",
    "\n",
    "N = 20 #Number of points, number of rows in matrices\n",
    "\n",
    "#Generating sample points\n",
    "for i in np.arange(N):\n",
    "    #First determine which true cluster is generating the sample\n",
    "    category_sample = random.uniform()\n",
    "    temp = sorted(list(np.cumsum(categorical_weights)) + [category_sample])\n",
    "    category_index = list(temp).index(category_sample)\n",
    "    \n",
    "    #Then generate the point\n",
    "    x += [random.uniform(partitions[category_index], partitions[category_index + 1])]\n",
    "    y += [random.uniform(partitions[category_index], partitions[category_index + 1])]     \n",
    "    \n",
    "plt.plot(x, y, '.')\n",
    "samples = list(zip(x, y))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "id": "b0229b4f-ca45-45aa-84a4-c0383a7d2dff",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Construct similarity matrix\n",
    "N = np.shape(X)[0]#len(samples)\n",
    "sigma = 1 #Controls width of neighborhoods, set by user\n",
    "k = d #Number of clusters, set by user\n",
    "S = np.zeros((N, N))\n",
    "for i in np.arange(N):\n",
    "    for j in np.arange(N):\n",
    "        S[i, j] += np.exp(-distance.euclidean(X[i], X[j])/(2*sigma**2))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b4db2eff-257b-4148-acd9-a48b809f104c",
   "metadata": {},
   "outputs": [],
   "source": [
    "diags = []\n",
    "for i in np.arange(N):\n",
    "    sum =0\n",
    "    for j in np.arange(N):\n",
    "        sum += np.sum(S[i, j])\n",
    "    diags += [sum]\n",
    "D = np.diag(diags)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "5b4cf1f8-4e26-4685-80d0-2b5d059e8907",
   "metadata": {},
   "outputs": [],
   "source": [
    "L = D-S"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "3c612485-d46d-4968-a813-7e9c6e0ea473",
   "metadata": {},
   "outputs": [],
   "source": [
    "def generalized_eigenvectors(L, D, k):\n",
    "    # Compute the generalized eigenvalues and eigenvectors\n",
    "    eigenvalues, eigenvectors = eig(L, D)\n",
    "\n",
    "    # Sort eigenvalues and eigenvectors\n",
    "    idx = np.argsort(eigenvalues.real)\n",
    "    eigenvalues = eigenvalues[idx]\n",
    "    eigenvectors = eigenvectors[:, idx]\n",
    "\n",
    "    # Extract the first k eigenvectors\n",
    "    first_k_eigenvectors = eigenvectors[:, :k]\n",
    "\n",
    "    return first_k_eigenvectors\n",
    "\n",
    "# Compute the first k generalized eigenvectors\n",
    "first_k_eigenvectors = generalized_eigenvectors(L, D, k)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "4c5710a9-1fc7-4703-a39a-8fd8543a437d",
   "metadata": {},
   "outputs": [],
   "source": [
    "kmeans = KMeans(n_clusters=k, random_state=0, n_init=\"auto\").fit(first_k_eigenvectors)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "5c98b2f1-9ca3-4efb-8e7d-578468c6dd73",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.scatter(x, y, c=kmeans.labels_)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "968e99da-87a8-46eb-ae92-6a565a5c0a3f",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Function to generate points for a spiral with added noise\n",
    "def generate_spiral_points_with_noise(theta, a, b, offset, noise_level):\n",
    "    x = (a + b * theta) * np.cos(theta + offset) + np.random.normal(0, noise_level, size=theta.shape)\n",
    "    y = (a + b * theta) * np.sin(theta + offset) + np.random.normal(0, noise_level, size=theta.shape)\n",
    "    return x, y\n",
    "\n",
    "# Number of points for each spiral\n",
    "num_points = 1000\n",
    "\n",
    "# Parameters for the spirals\n",
    "a = 1\n",
    "b = 0.5\n",
    "\n",
    "# Noise level\n",
    "noise_level = 0.2\n",
    "\n",
    "# Generate points for the first spiral with noise\n",
    "theta1 = np.linspace(0, 4 * np.pi, num_points)\n",
    "offset1 = 0\n",
    "x1, y1 = generate_spiral_points_with_noise(theta1, a, b, offset1, noise_level)\n",
    "\n",
    "# Generate points for the second spiral with noise\n",
    "theta2 = np.linspace(0, 4 * np.pi, num_points)\n",
    "offset2 = np.pi  # Offset by pi to interlace the spirals\n",
    "x2, y2 = generate_spiral_points_with_noise(theta2, a, b, offset2, noise_level)\n",
    "\n",
    "# Combine the points\n",
    "X = np.vstack((np.column_stack((x1, y1)), np.column_stack((x2, y2))))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "781c359e-eb74-499d-8301-e9347923b473",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[ 1.42180784,  0.18145181],\n",
       "       [ 1.34490935,  0.29538295],\n",
       "       [ 1.01397903, -0.12386921]])"
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X[0:3,0:3]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "2aa556b7-d713-45a2-af19-2b4666298366",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "2000"
      ]
     },
     "execution_count": 39,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "np.shape(X)[0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f82da05b-7b58-44d9-a150-279c2fabf277",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
